# vim: ft=zsh:
# mike prompt theme

autoload -Uz vcs_info
autoload -Uz colors && colors

prompt_mike_help () {
  cat <<'EOF'
  prompt mike
EOF
}


python_prompt_info() {
  local python_prompt
  python_prompt='p'
  if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* && -z $ZSH_NO_UTF8 ]]; then
    python_prompt='ᚹ'
  fi
  if [[ -d "$HOME/.pyenv/bin" ]]; then
    if [[ "$(pyenv version-origin)" == "$(pyenv root)/version" ]]; then
      return
    fi
    echo "%{$fg[green]%}$python_prompt:$(pyenv version-name)%{$reset_color%} "
  else
    return
  fi
}

ruby_prompt_info() {
  local ruby_version
  local ruby_prompt
  ruby_version=''
  ruby_prompt='r'
  if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* && -z $ZSH_NO_UTF8 ]]; then
    ruby_prompt='ᚱ'
  fi
  if [[ -d "$HOME/.rbenv/bin" ]]; then
    if [[ "$(rbenv version-origin)" == "$(rbenv root)/version" ]]; then
      return
    fi
    ruby_version="$(rbenv version-name 2> /dev/null)"
  elif [[ -d "$HOME/.rvm" ]]; then
    if [[ "$(rvm current)" == "system" ]]; then
      return
    fi
    ruby_version="$(~/.rvm/bin/rvm-prompt i v g)"
  else
    return
  fi
  echo "%{$fg[green]%}$ruby_prompt:$ruby_version%{$reset_color%} "
}

prompt_mike_setup () {
  if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* && -z $ZSH_NO_UTF8 ]]; then
    prompt_terminators='%#'
    prompt_elipsis='…'
    vcs_staged='✚'
    vcs_unstaged='✭'
    vcs_untracked='✘'
    vcs_equal_upstream='='
    vcs_ahead_upstream='→'
    vcs_behind_upstream='←'
    vcs_diverged_upstream='↔'
    vcs_marker_git='±'
    vcs_marker_svn='⚡'
  else
    prompt_terminators='%#'
    prompt_elipsis='...'
    vcs_staged='+'
    vcs_unstaged='*'
    vcs_untracked='%'
    vcs_equal_upstream='='
    vcs_ahead_upstream='>'
    vcs_behind_upstream='<'
    vcs_diverged_upstream='<>'
    vcs_marker_git='G'
    vcs_marker_svn='S'
  fi

  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' formats "%B%{$fg[black]%}|%s:%b%m|%{$reset_color%}%%b%{$fg[red]%}%u%{$fg[green]%}%c%{$reset_color%}"
  zstyle ':vcs_info:*' actionformats "%B%{$fg[black]%}|%s:%b(%a)%m|%{$reset_color%}%%b%{$fg[red]%}%u%{$fg[green]%}%c%{$reset_color%}"
  zstyle ':vcs_info:*' stagedstr "$vcs_staged"
  zstyle ':vcs_info:*' unstagedstr "$vcs_unstaged"
  #zstyle ':vcs_info:*+*:*' debug true # hooks
  zstyle ':vcs_info:svn*+set-message:*' hooks svn-symbol
  zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-remotedata git-symbol

  +vi-svn-symbol() {
    hook_com[vcs]=$vcs_marker_svn
  }

  +vi-git-symbol() {
    hook_com[vcs]=$vcs_marker_git
  }

  +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
      git status --porcelain | grep '??' &> /dev/null ; then
      hook_com[unstaged]+="%{$fg[yellow]%}$vcs_untracked"
    fi
  }

  +vi-git-remotedata(){
    revcount=$(git rev-list --count --left-right \
      ${hook_com[branch]}@{upstream}...HEAD 2>/dev/null)
    if [[ -n $revcount ]]; then
      left=$(echo $revcount | cut -f1)
      right=$(echo $revcount | cut -f2)
      if [[ $left == 0 && $right == 0 ]]; then
        hook_com[misc]+=$vcs_equal_upstream
      elif [[ $left == 0 ]]; then
        hook_com[misc]+=$vcs_ahead_upstream
      elif [[ $right == 0 ]]; then
        hook_com[misc]+=$vcs_behind_upstream
      else
        hook_com[misc]+=$vcs_diverged_upstream
      fi
    fi
  }

  prompt_user="%{$fg[green]%}%n%{$reset_color%}"
  prompt_host="%{$fg[green]%}%m%{$reset_color%}"
  prompt_cwd="%{$fg[cyan]%}%16<$prompt_elipsis<%~%<<%{$reset_color%}"
  prompt_terminator="%B%{$fg[white]%}${prompt_terminators}%{$reset_color%}%b"

  PS1='${prompt_cwd}$(python_prompt_info)$(ruby_prompt_info)
${prompt_user}@${prompt_host} ${prompt_terminator} '
  PS1='${prompt_user}@${prompt_host}:${prompt_cwd}${prompt_terminator} '
  RPS1='$(python_prompt_info)$(ruby_prompt_info)'
  if [[ -z $ZSH_NO_VCS ]]; then
    RPS1=$RPS1'${vcs_info_msg_0_}'
  fi
}

if [[ -z $ZSH_NO_VCS ]]; then
  prompt_vcs_precmd() {
    vcs_info
  }
  add-zsh-hook precmd prompt_vcs_precmd
fi

prompt_mike_setup "$@"
